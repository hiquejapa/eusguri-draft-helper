permissions:
  contents: write

name: Sync from Google Drive

on:
  schedule:
    - cron: "0 * * * *"   # roda todo come√ßo de hora
  workflow_dispatch:       # tu pode rodar manualmente pelo GitHub Actions

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

      - name: Download from Google Drive (to data/)
        env:
          GDRIVE_SERVICE_ACCOUNT: ${{ secrets.GDRIVE_SERVICE_ACCOUNT }}
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        shell: python
        run: |
          import json, os, io
          from pathlib import Path
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaIoBaseDownload

          creds_info = json.loads(os.environ["GDRIVE_SERVICE_ACCOUNT"])
          creds = service_account.Credentials.from_service_account_info(
              creds_info,
              scopes=['https://www.googleapis.com/auth/drive.readonly']
          )
          service = build('drive', 'v3', credentials=creds)

          ROOT_ID = os.environ["GDRIVE_FOLDER_ID"]
          OUTDIR = Path("data")   # <-- destino novo
          OUTDIR.mkdir(parents=True, exist_ok=True)

          EXPORT_MAP = {
              "application/vnd.google-apps.document": ("application/pdf", ".pdf"),
              "application/vnd.google-apps.spreadsheet": ("text/csv", ".csv"),
              "application/vnd.google-apps.presentation": ("application/pdf", ".pdf"),
          }

          def list_children(folder_id):
              page_token = None
              while True:
                  resp = service.files().list(
                      q=f"'{folder_id}' in parents and trashed=false",
                      fields="nextPageToken, files(id,name,mimeType)",
                      pageToken=page_token
                  ).execute()
                  for f in resp.get('files', []):
                      yield f
                  page_token = resp.get('nextPageToken')
                  if not page_token:
                      break

          def download_file(file_obj, dest_path):
              fid, name, mt = file_obj["id"], file_obj["name"], file_obj["mimeType"]
              if mt in EXPORT_MAP:
                  mime, ext = EXPORT_MAP[mt]
                  dest = dest_path.with_suffix(ext)
                  request = service.files().export_media(fileId=fid, mimeType=mime)
              else:
                  dest = dest_path
                  request = service.files().get_media(fileId=fid)
              fh = io.FileIO(dest, 'wb')
              downloader = MediaIoBaseDownload(fh, request)
              done = False
              while not done:
                  status, done = downloader.next_chunk()

          def recurse(folder_id, base_dir):
              for f in list_children(folder_id):
                  fid, name, mt = f["id"], f["name"], f["mimeType"]
                  if mt == "application/vnd.google-apps.folder":
                      subdir = base_dir / name
                      subdir.mkdir(exist_ok=True)
                      recurse(fid, subdir)
                  else:
                      download_file(f, base_dir / name)

          recurse(ROOT_ID, OUTDIR)
          print("Download completo para data/")

      - name: Remove pasta antiga synced_output (se existir)
        run: |
          if [ -d "synced_output" ]; then
            git rm -r --cached synced_output || true
            rm -rf synced_output
          fi

      - name: Commit changes (if any)
        run: |
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
          git add -A
          git commit -m "Sync Drive -> data/" || echo "Nada novo para commitar"

      - name: Push to target branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:main
